#+title: Compare the different methods

Here I will compare 3 methods of filling missing data of FITS files.

 1. Astropy's Convolution
 2. Python's Maskfill method
 3. R-INLA

* Callable functions

#+name: threshold
#+begin_src python :results table
import numpy as np
threshold = np.arange(0,50,10)
return threshold
#+end_src

#+RESULTS: threshold
| 0 | 10 | 20 | 30 | 40 |

#+name: filling
#+begin_src python :results drawer output :var path = "astropy_conv" title="Astropy's Convolution" threshold = threshold fitsname = "galactic_center" :eval no
import matplotlib.pyplot as plt
import numpy as np
from astropy.io import fits
from astropy.visualization import astropy_mpl_style


fig, axes = plt.subplots(3, 5, figsize=(20, 12))  # Adjust the number of subplots as needed

# Iterate over different thresholds
for idx, i in enumerate(threshold):
    filename = "{}/{}_filled_{}.fits".format(path, fitsname,i)

    # Load the image data
    img_data_filled = fits.getdata(filename)

    # Plot the image
    ax = axes[1,idx]
    im = ax.imshow(img_data_filled, cmap='viridis', origin='lower')
    ax.set_title("Threshold {}".format(i))
    plt.colorbar(im, ax=ax, orientation='vertical', label='Intensity')
######### Iterate over different thresholds for the second row of subplots
    filename = "{}_masked_{}.fits".format(fitsname, i)

    # Load the image data
    img_data_masked = fits.getdata(filename)

    # Plot the image on the second row
    ax = axes[0, idx]
    im = ax.imshow(img_data_masked, cmap='viridis', origin='lower', vmin=-2.0, vmax=20.0)
    plt.colorbar(im, ax=ax, orientation='vertical', label='Intensity')

######### Iterate over different diffs for the third row of subplots
    filename = "{}/{}_diffs_{}.fits".format(path,fitsname, i)

    # Load the original image data
    original = fits.getdata(f"{fitsname}.fits")

    img_diffs = np.abs(((original - img_data_filled)/original))*100

    # Plot the image on the second row
    ax = axes[2, idx]
    im = ax.imshow(img_diffs, cmap='viridis', origin='lower')
    ax.set_title("(Original - Filled({}))/Original %".format(i))
    plt.colorbar(im, ax=ax, orientation='vertical', label='Intensity(%)')
######### Save the Diffs
    hdu = fits.PrimaryHDU(img_diffs)

    hdu.writeto(filename,overwrite = True)

# Adjust layout and display the figure
fig.suptitle("{}".format(title))
plt.tight_layout()
filename = "visualizations/{}/{}".format(fitsname, title)
plt.savefig(filename)
plt.close()

print("[[./"+filename+".png]]")
#+end_src

#+name: comparison
#+begin_src python :results drawer :return tabulate(df, headers=df.columns, tablefmt='orgtbl') :var path = "astropy_conv" fitsname = "galactic_center" :eval yes
import numpy as np
from tabulate import tabulate
from skimage.metrics import structural_similarity as ssim
from astropy.io import fits
import pandas as pd

# Load the FITS images for the masked images
masked_images = [fits.getdata('{}/{}_filled_{}.fits'.format(path,fitsname, i)) for i in np.arange(0, 50, 10)]

# Load the corresponding original images
original_images = fits.getdata('{}.fits'.format(fitsname))


# Calculate MSE and SSIM for each comparison
mse_values = [np.mean((original_images - masked_images[i]) ** 2) for i in range(len(masked_images))]
ssim_values = [ssim(original_images, masked_images[i], data_range=original_images.max() - original_images.min()) for i in range(len(masked_images))]

# Create a DataFrame to store the results
data = {'Comparison': np.arange(0, 50, 10),
        'MSE': mse_values,
        'SSIM': ssim_values}
df = pd.DataFrame(data)
#+end_src

#+RESULTS: comparison
:results:
|   | Comparison |     MSE |     SSIM |
|---+------------+---------+----------|
| 0 |          0 | 41.3184 | 0.954215 |
| 1 |         10 | 175.025 | 0.828449 |
| 2 |         20 | 156.099 | 0.867492 |
| 3 |         30 | 146.611 | 0.886603 |
| 4 |         40 |  135.17 | 0.903326 |
:end:

#+name:vis
#+begin_src python :results drawer output :var filename="galactic_center.fits" name="name" :exports results
import matplotlib.pyplot as plt
import numpy as np
from astropy.io import fits
from astropy.visualization import astropy_mpl_style


def vis(filename, name):

    hdul = fits.open(filename)

    data = hdul[0].data
    hdul.close()
    fname = "./visualizations/" + name + ".png"
    plt.style.use(astropy_mpl_style)

    plt.imshow(data, cmap="viridis", origin='lower', vmin=-2.0, vmax=20.0,)

    plt.title(name)
    plt.colorbar(orientation='vertical',label='Intensity')
    plt.savefig(fname)
    plt.close()
    return print("[["+fname+"]]")

vis(filename, name)
#+end_src

#+RESULTS: vis
:results:
[[./visualizations/name.png]]
:end:

* The files

** The astropy data

I will use the data from data.astropy.org. The reason for this is that we have a dense non homogeneous image and it will be good for testing

#+begin_src python :session masking :results output
import matplotlib.pyplot as plt
import numpy as np
from astropy.convolution import Gaussian2DKernel, convolve
from astropy.io import fits
from astropy.utils.data import get_pkg_data_filename
from scipy.ndimage import convolve as scipy_convolve

# Load the data from data.astropy.org
filename = get_pkg_data_filename('galactic_center/gc_msx_e.fits')
hdul = fits.open(filename)

hdul.info()
data = hdul[0].data

zoom = data[50:90, 60:100] * 1e5


hdul_1 = fits.PrimaryHDU(zoom)
gal_center = "galactic_center"
fitsname = gal_center
hdul_1.writeto(f"{fitsname}.fits",overwrite = True)

hdul.close()
#+end_src

#+RESULTS:
: Filename: /home/dp/.astropy/cache/download/url/b411ba5069b9fe8a0c38f5fd2c6b365d/contents
: No.    Name      Ver    Type      Cards   Dimensions   Format
:   0  PRIMARY       1 PrimaryHDU      24   (149, 149)   float64


Scale the file to have reasonable numbers (this is mostly so that colorbars do not have too many digits). Also, we crop it so you can see individual pixels

Then we can mask it by setting the brightest pixels to NaN

#+begin_src python :session masking :results file :var threshold = threshold
for i in threshold:
    img = zoom.copy()
    if i > 0:
        img[img > i] = np.nan
    hdu = fits.PrimaryHDU(img)
    filename = "{}_masked_{}.fits".format(fitsname, i)
    hdu.writeto(filename,overwrite = True)


ig, axes = plt.subplots(1, len(threshold), figsize=(20, 4))  # Adjust the number of subplots as needed

# Iterate over different thresholds
for idx, i in enumerate(np.arange(0, 50, 10)):
    filename = "{}_masked_{}.fits".format(fitsname, i)

    # Load the image data
    img_data = fits.getdata(filename)

    # Plot the image
    ax = axes[idx]
    im = ax.imshow(img_data, cmap='viridis', origin='lower', vmin=-2.0, vmax=20.0)
    ax.set_title("Threshold {}".format(i))
    plt.colorbar(im, ax=ax, orientation='vertical', label='Intensity')

# Adjust layout and display the figure
plt.tight_layout()
filename = "visualizations/masked_fits"
plt.savefig(filename)
plt.close()

filename+".png"
#+end_src

#+RESULTS:
[[file:visualizations/masked_fits.png]]



* Astropy Convolution


#+begin_src python :session astropy_convolution :results none
import numpy as np
import matplotlib.pyplot as plt
from astropy.convolution import Gaussian2DKernel, convolve
from astropy.io import fits
from scipy.ndimage import convolve as scipy_convolve
import os

mypath = "astropy_conv"

if not os.path.exists(mypath):
    os.mkdir(mypath)
gal_center = "galactic_center"
fitsname = gal_center

#+end_src

We smooth with a Gaussian kernel with x_stddev=1 (and y_stddev=1). It is a 9x9 array.
Astropy's convolution replaces the NaN pixels with a kernel-weighted interpolation from their neighbors

#+begin_src python :session astropy_convolution :results none :var threshold=threshold
for i in threshold:
    data = fits.open("{}_masked_{}.fits".format(fitsname, i))[0].data

    kernel = Gaussian2DKernel(x_stddev=1)
    astropy_conv = convolve(data, kernel)

    hdu = fits.PrimaryHDU(astropy_conv)

    hdu.writeto("astropy_conv/{}_filled_{}.fits".format(fitsname, i),overwrite = True)
#+end_src



#+call: filling[:eval yes](path = "astropy_conv", title="Astropy's Convolution")

#+RESULTS:
:results:
[[./visualizations/galactic_center/Astropy's Convolution.png]]
:end:

#+call: comparison[:eval yes](path = "astropy_conv")

#+RESULTS:
:results:
|   | Comparison |     MSE |     SSIM |
|---+------------+---------+----------|
| 0 |          0 | 41.3184 | 0.954215 |
| 1 |         10 | 175.025 | 0.828449 |
| 2 |         20 | 156.099 | 0.867492 |
| 3 |         30 | 146.611 | 0.886603 |
| 4 |         40 |  135.17 | 0.903326 |
:end:

** Astropy Fast Fourier Transform (FFT).

This is much more efficient for larger kernels.
#+begin_src python :session astropy_fft :results none :var threshold=threshold
import numpy as np
import matplotlib.pyplot as plt
from astropy.convolution import Gaussian2DKernel, convolve_fft
from astropy.io import fits
from scipy.ndimage import convolve as scipy_convolve
import os

mypath = "astropy_fft"
gal_center = "galactic_center"
fitsname = gal_center

if not os.path.exists(mypath):
    os.mkdir(mypath)

for i in threshold:
    data = fits.open("{}_masked_{}.fits".format(fitsname, i))[0].data

    kernel = Gaussian2DKernel(x_stddev=1)
    astropy_conv = convolve_fft(data, kernel)

    hdu = fits.PrimaryHDU(astropy_conv)

    hdu.writeto("astropy_fft/{}_filled_{}.fits".format(fitsname, i),overwrite = True)
#+end_src



#+call: filling[:eval yes](path = "astropy_fft", title="Astropy's FFT Convolution")

#+RESULTS:
:results:
[[./visualizations/galactic_center/Astropy's FFT Convolution.png]]
:end:


#+call: comparison[:eval yes](path = "astropy_fft")

#+RESULTS:
:results:
|   | Comparison |     MSE |     SSIM |
|---+------------+---------+----------|
| 0 |          0 | 41.3184 | 0.954215 |
| 1 |         10 | 175.025 | 0.828449 |
| 2 |         20 | 156.099 | 0.867492 |
| 3 |         30 | 146.611 | 0.886603 |
| 4 |         40 |  135.17 | 0.903326 |
:end:

* Python Maskfill

#+begin_src python :session maskfill :results none :var x = threshold
from astropy.io import fits
import numpy as np
from maskfill import maskfill #download from github NOT pip
import matplotlib.pyplot as plt
from astropy.visualization import astropy_mpl_style

gal_center = "galactic_center"
fitsname = gal_center

for i in x:
    hdul = fits.open("{}_masked_{}.fits".format(fitsname,i))
    # Get the data from the FITS file
    data = hdul[0].data

    # Create a masked array from the data, masking NaN values
    masked_data = np.ma.masked_invalid(data)

    # Access the mask array
    mask_array = masked_data.mask

    maskfill(data, mask_array,writesteps=False,output_file='maskfilled/{}_filled_{}.fits'.format(fitsname, i),verbose=True)

#+end_src


#+call: filling[:eval yes](path = "maskfilled", title="Maskfill")

#+RESULTS:
:results:
[[./visualizations/galactic_center/Maskfill.png]]
:end:

#+call: comparison[:eval yes](path = "maskfilled")

#+RESULTS:
:results:
|   | Comparison |     MSE |     SSIM |
|---+------------+---------+----------|
| 0 |          0 |       0 |        1 |
| 1 |         10 |   169.6 | 0.840653 |
| 2 |         20 | 150.396 | 0.885354 |
| 3 |         30 |  140.01 | 0.910179 |
| 4 |         40 | 125.399 | 0.933453 |
:end:

* R-INLA

#+begin_src python :results none
import os

mypath = "r-inla"

if not os.path.exists(mypath):
    os.mkdir(mypath)

#+end_src


#+call: vis[:var filename = "./r-inla/galactic_center_filled_40.fits"]

#+RESULTS:
:results:
[[./visualizations/name.png]]
:end:

#+call: filling[:eval yes](path = "r-inla", title="Astropy's Convolution")

#+RESULTS:
:results:
:end:

* Comparisons

1. **Mean Squared Error (MSE)**:
   - Mean Squared Error is a commonly used metric to measure the average squared difference between the original and the masked images. It quantifies the average of the squares of the errors or deviations. A lower MSE value indicates a closer resemblance between the two images.
   - The formula for MSE between two images A and B, each with dimensions \(m \times n\), is:

     \[
     MSE = \frac{1}{mn} \sum_{i=0}^{m-1} \sum_{j=0}^{n-1} (A_{ij} - B_{ij})^2
     \]

2. **Structural Similarity Index (SSIM)**:
   - SSIM is a perception-based metric that measures the similarity between two images. It considers luminance, contrast, and structure. Unlike MSE, SSIM takes into account the structure of the images, making it more suitable for assessing perceptual differences.
   - The SSIM index ranges from -1 to 1, where 1 indicates perfect similarity. Typically, a value above 0.9 is considered a good match.
   - The SSIM index formula involves comparisons between local neighborhoods of the images' pixels. The formula for SSIM index between images A and B is:

     \[
     SSIM(A, B) = \frac{(2 \mu_A \mu_B + C_1)(2 \sigma_{AB} + C_2)}{(\mu_A^2 + \mu_B^2 + C_1)(\sigma_A^2 + \sigma_B^2 + C_2)}
     \]

     Here,
     - \(\mu_A\) and \(\mu_B\) are the means of images A and B,
     - \(\sigma_A^2\) and \(\sigma_B^2\) are the variances of images A and B,
     - \(\sigma_{AB}\) is the covariance of images A and B,
     - \(C_1\) and \(C_2\) are small constants to prevent division by zero errors and stabilize the division, and
     - \(L\) is the dynamic range of pixel values (typically \(2^{\text{bitdepth}} - 1\) for images with bit depth).


** Astropy conv
#+call: comparison[:eval yes](path = "astropy_conv")

#+RESULTS:
:results:
|    |   Comparison |      MSE |     SSIM |
|----+--------------+----------+----------|
|  0 |            0 |  41.3184 | 0.954215 |
|  1 |           10 | 175.025  | 0.828449 |
|  2 |           20 | 156.099  | 0.867492 |
|  3 |           30 | 146.611  | 0.886603 |
|  4 |           40 | 135.17   | 0.903326 |
:end:

** Astropy fft
#+call: comparison[:eval yes](path = "astropy_fft")

#+RESULTS:
:results:
|    |   Comparison |      MSE |     SSIM |
|----+--------------+----------+----------|
|  0 |            0 |  41.3184 | 0.954215 |
|  1 |           10 | 175.025  | 0.828449 |
|  2 |           20 | 156.099  | 0.867492 |
|  3 |           30 | 146.611  | 0.886603 |
|  4 |           40 | 135.17   | 0.903326 |
:end:

** Maskfill
#+call: comparison[:eval yes](path = "maskfilled")

#+RESULTS:
:results:
|    |   Comparison |     MSE |     SSIM |
|----+--------------+---------+----------|
|  0 |            0 |   0     | 1        |
|  1 |           10 | 169.6   | 0.840653 |
|  2 |           20 | 150.396 | 0.885354 |
|  3 |           30 | 140.01  | 0.910179 |
|  4 |           40 | 125.399 | 0.933453 |
:end:
