file <- paste(dir,"HI_6563s",sep='')
outfile <- paste(file,"inla",sep='-')
eroutfile <- paste(file,"erinla",sep='-')
#read file
fits <- readFITS(file=paste(file,"fit",sep='.'))
img <- fits$imDat[,]
subset_img <- img[1:20, 1:20]  # This will extract the top-left 20x20 portion of the img array
# Get dimensions of the img array
dims <- dim(img)
# Create x and y arrays using matrix indexing
x <- matrix(rep(1:dims[1], dims[2]), nrow = dims[1], ncol = dims[2])
y <- matrix(rep(1:dims[2], each = dims[1]), nrow = dims[1], ncol = dims[2])
##valid data
valid <- which(!(img < 20 | is.na(img)))
xsize <- dims[2]
ysize <- dims[1]
xfin <- xsize
yfin <- ysize
##normalize data
logimg = log10(img)
## INLA
imginla <- stationary_inla(x[valid],y[valid],logimg[valid],zoom=zoom,
xsize=xsize,shape='none',xfin=xfin,
yfin=yfin,ysize=ysize,cutoff=cutoff,
tolerance=1e-6,restart=0)
home <- "/home/dp/"
source(paste("./inla_fct.R",sep=''))
name <- "stavros"
dir <- paste("./first_results/",sep='')
file <- paste(dir,"HI_6563s",sep='')
outfile <- paste(file,"inla",sep='-')
eroutfile <- paste(file,"erinla",sep='-')
#read file
fits <- readFITS(file=paste(file,"fit",sep='.'))
img <- fits$imDat[,]
subset_img <- img[1:20, 1:20]  # This will extract the top-left 20x20 portion of the img array
# Get dimensions of the img array
dims <- dim(img)
# Create x and y arrays using matrix indexing
x <- matrix(rep(1:dims[1], dims[2]), nrow = dims[1], ncol = dims[2])
y <- matrix(rep(1:dims[2], each = dims[1]), nrow = dims[1], ncol = dims[2])
##valid data
valid <- which(!(img < 20 | is.na(img)))
xsize <- dims[2]
ysize <- dims[1]
xfin <- xsize
yfin <- ysize
##normalize data
logimg = log10(img)
## INLA
imginla <- stationary_inla(x[valid],y[valid],logimg[valid],zoom=zoom,
xsize=xsize,shape='none',xfin=xfin,
yfin=yfin,ysize=ysize,cutoff=cutoff,
tolerance=1e-6,restart=0)
## INLA
imginla <- stationary_inla(x[valid],y[valid],logimg[valid],zoom=zoom,
xsize=xsize,shape='none',xfin=xfin,
yfin=yfin,ysize=ysize,cutoff=cutoff,
tolerance=1e-3,restart=0)
## INLA
imginla <- stationary_inla(x[valid],y[valid],logimg[valid],zoom=zoom,
xsize=xsize,shape='none',xfin=xfin,
yfin=yfin,ysize=ysize,cutoff=cutoff,
tolerance=1,restart=0)
library(INLA)
library(IDPmisc)
require(rasterVis)
library(viridis)
library(latex2exp)
library(fields) #;library(imager);
library(lattice);require(latticeExtra) #;require(INLAutils)
require(classInt);require(reshape2)
library(FITSio)
library(rmarkdown)
Van_Gogh <- c("#263C8B","#4E74A6", "#BDBF78", "#BFA524", "#2E231F")
colpal<-colorRampPalette(Van_Gogh)(100)
cutColor <- 100
zoom <- 1
cutoff <- 0.9 #bit lower than minimum distance
home <- "/home/dp/"
source(paste("./inla_fct.R",sep=''))
name <- "stavros"
dir <- paste("./first_results/",sep='')
file <- paste(dir,"HI_6563s",sep='')
outfile <- paste(file,"inla",sep='-')
eroutfile <- paste(file,"erinla",sep='-')
#read file
fits <- readFITS(file=paste(file,"fit",sep='.'))
img <- fits$imDat[,]
subset_img <- img[1:20, 1:20]  # This will extract the top-left 20x20 portion of the img array
# Get dimensions of the img array
dims <- dim(img)
# Create x and y arrays using matrix indexing
x <- matrix(rep(1:dims[1], dims[2]), nrow = dims[1], ncol = dims[2])
y <- matrix(rep(1:dims[2], each = dims[1]), nrow = dims[1], ncol = dims[2])
##valid data
valid <- which(!(img < 20 | is.na(img)))
xsize <- dims[2]
ysize <- dims[1]
xfin <- xsize
yfin <- ysize
##normalize data
logimg = log10(img)
## INLA
imginla <- stationary_inla(x[valid],y[valid],logimg[valid],zoom=zoom,
xsize=xsize,shape='none',xfin=xfin,
yfin=yfin,ysize=ysize,cutoff=cutoff,
tolerance=1e-6,restart=0)
install.packages("rasterVis")
install.packages("terra")
install.packages("rasterVis")
install.packages('rasterVis')
install.packages("terra")
install.packages("rasterVis")
install.packages("rasterVis")
library(INLA)
library(IDPmisc)
require(rasterVis)
library(viridis)
library(latex2exp)
library(fields) #;library(imager);
library(lattice);require(latticeExtra) #;require(INLAutils)
install.packages(c("FITSio", "classInt", "reshape2"))
library(INLA)
library(IDPmisc)
require(rasterVis)
library(viridis)
library(latex2exp)
library(fields) #;library(imager);
library(lattice);require(latticeExtra) #;require(INLAutils)
require(classInt);require(reshape2)
library(FITSio)
library(rmarkdown)
Van_Gogh <- c("#263C8B","#4E74A6", "#BDBF78", "#BFA524", "#2E231F")
colpal<-colorRampPalette(Van_Gogh)(100)
cutColor <- 100
zoom <- 1
cutoff <- 0.9 #bit lower than minimum distance
home <- "/home/dp/"
source(paste("./inla_fct.R",sep=''))
name <- "stavros"
dir <- paste("./first_results/",sep='')
file <- paste(dir,"HI_6563s",sep='')
outfile <- paste(file,"inla",sep='-')
eroutfile <- paste(file,"erinla",sep='-')
#read file
fits <- readFITS(file=paste(file,"fit",sep='.'))
img <- fits$imDat[,]
subset_img <- img[1:20, 1:20]  # This will extract the top-left 20x20 portion of the img array
# Get dimensions of the img array
dims <- dim(img)
# Create x and y arrays using matrix indexing
x <- matrix(rep(1:dims[1], dims[2]), nrow = dims[1], ncol = dims[2])
y <- matrix(rep(1:dims[2], each = dims[1]), nrow = dims[1], ncol = dims[2])
##valid data
valid <- which(!(img < 20 | is.na(img)))
xsize <- dims[2]
ysize <- dims[1]
xfin <- xsize
yfin <- ysize
##normalize data
logimg = log10(img)
## INLA
imginla <- stationary_inla(x[valid],y[valid],logimg[valid],zoom=zoom,
xsize=xsize,shape='none',xfin=xfin,
yfin=yfin,ysize=ysize,cutoff=cutoff,
tolerance=1,restart=0)
library(INLA)
library(IDPmisc)
require(rasterVis)
library(viridis)
library(latex2exp)
library(fields) #;library(imager);
library(lattice);require(latticeExtra) #;require(INLAutils)
require(classInt);require(reshape2)
library(FITSio)
library(rmarkdown)
Van_Gogh <- c("#263C8B","#4E74A6", "#BDBF78", "#BFA524", "#2E231F")
colpal<-colorRampPalette(Van_Gogh)(100)
cutColor <- 100
zoom <- 1
cutoff <- 0.9 #bit lower than minimum distance
home <- "/home/dp/"
source(paste("./inla_fct.R",sep=''))
name <- "stavros"
dir <- paste("./first_results/",sep='')
file <- paste(dir,"HI_6563s",sep='')
outfile <- paste(file,"inla",sep='-')
eroutfile <- paste(file,"erinla",sep='-')
#read file
fits <- readFITS(file=paste(file,"fit",sep='.'))
img <- fits$imDat[,]
subset_img <- img[1:20, 1:20]  # This will extract the top-left 20x20 portion of the img array
# Get dimensions of the img array
dims <- dim(img)
# Create x and y arrays using matrix indexing
x <- matrix(rep(1:dims[1], dims[2]), nrow = dims[1], ncol = dims[2])
y <- matrix(rep(1:dims[2], each = dims[1]), nrow = dims[1], ncol = dims[2])
##valid data
valid <- which(!(img < 20 | is.na(img)))
xsize <- dims[2]
ysize <- dims[1]
xfin <- xsize
yfin <- ysize
##normalize data
logimg = log10(img)
## INLA
imginla <- stationary_inla(x[valid],y[valid],logimg[valid],zoom=zoom,
xsize=xsize,shape='none',xfin=xfin,
yfin=yfin,ysize=ysize,cutoff=cutoff,
tolerance=1,restart=0)
## INLA
imginla <- stationary_inla(x[valid],y[valid],logimg[valid],zoom=zoom,
xsize=xsize,shape='none',xfin=xfin,
yfin=yfin,ysize=ysize,cutoff=cutoff,
tolerance=1e-6,restart=0)
## INLA
imginla <- stationary_inla(x[valid],y[valid],logimg[valid],zoom=zoom,
xsize=xsize,shape='none',xfin=xfin,
yfin=yfin,ysize=ysize,cutoff=cutoff,
tolerance=1e-6,restart=2)
## INLA
imginla <- stationary_inla(x[valid],y[valid],logimg[valid],zoom=zoom,
xsize=xsize,shape='none',xfin=xfin,
yfin=yfin,ysize=ysize,cutoff=cutoff,
tolerance=1e-6,restart=20)
## INLA
imginla <- stationary_inla(x[valid],y[valid],logimg[valid],zoom=zoom,
xsize=xsize,shape='none',xfin=xfin,
yfin=yfin,ysize=ysize,cutoff=cutoff,
tolerance=1e-6,restart=200)
## INLA
imginla <- stationary_inla(x[valid],y[valid],logimg[valid],zoom=zoom,
xsize=xsize,shape='none',xfin=xfin,
yfin=yfin,ysize=ysize,cutoff=cutoff,
tolerance=1e-6,restart=2000)
## INLA
imginla <- stationary_inla(x[valid],y[valid],logimg[valid],zoom=zoom,
xsize=xsize,shape='none',xfin=xfin,
yfin=yfin,ysize=ysize,cutoff=cutoff,
tolerance=1e-6,restart=20000)
imginla <- nonparametric_inla(tx, ty, tpar, tepar, weight=1, name='age',xsize=xsize,ysize=ysize)
imginla <- nonparametric_inla(x[valid],y[valid], logimg[valid],zoom=zoom, weight=1, name='age',xsize=xsize,ysize=ysize)
imginla <- nonparametric_inla(x[valid],y[valid], logimg[valid], weight=1, name='age',xsize=xsize,ysize=ysize)
imginla <- nonparametric_inla(x[valid],y[valid], logimg[valid],0, weight=1, name='age',xsize=xsize,ysize=ysize)
imginla <- nonparametric_inla(x[valid],y[valid], logimg[valid],1, weight=1, name='age',xsize=xsize,ysize=ysize)
imginla <- nonparametric_inla(x[valid],y[valid], logimg[valid],1, weight=1, name='age',xsize=xsize,ysize=ysize)
imginla <- nonparametric_inla(x[valid],y[valid], logimg[valid],1, weight=1, name='age',xsize=xsize,ysize=ysize)
imginla <- nonparametric_inla(x[valid],y[valid], logimg[valid],xsize=xsize,ysize=ysize)
home <- "/home/dp/"
source(paste("./inla_fct.R",sep=''))
name <- "stavros"
dir <- paste("./first_results/",sep='')
file <- paste(dir,"HI_6563s",sep='')
outfile <- paste(file,"inla",sep='-')
eroutfile <- paste(file,"erinla",sep='-')
#read file
fits <- readFITS(file=paste(file,"fit",sep='.'))
img <- fits$imDat[,]
subset_img <- img[1:20, 1:20]  # This will extract the top-left 20x20 portion of the img array
# Get dimensions of the img array
dims <- dim(img)
# Create x and y arrays using matrix indexing
x <- matrix(rep(1:dims[1], dims[2]), nrow = dims[1], ncol = dims[2])
y <- matrix(rep(1:dims[2], each = dims[1]), nrow = dims[1], ncol = dims[2])
##valid data
valid <- which(!(img < 20 | is.na(img)))
xsize <- dims[2]
ysize <- dims[1]
xfin <- xsize
yfin <- ysize
##normalize data
logimg = log10(img)
imginla <- nonparametric_inla(x[valid],y[valid], logimg[valid], ,xsize=xsize,ysize=ysize)
library(INLA)
library(IDPmisc)
require(rasterVis)
library(viridis)
library(latex2exp)
library(fields) #;library(imager);
library(lattice);require(latticeExtra) #;require(INLAutils)
require(classInt);require(reshape2)
library(FITSio)
library(rmarkdown)
Van_Gogh <- c("#263C8B","#4E74A6", "#BDBF78", "#BFA524", "#2E231F")
colpal<-colorRampPalette(Van_Gogh)(100)
cutColor <- 100
zoom <- 1
cutoff <- 0.9 #bit lower than minimum distance
home <- "/home/dp/"
source(paste("./inla_fct.R",sep=''))
name <- "stavros"
dir <- paste("./first_results/",sep='')
file <- paste(dir,"HI_6563s",sep='')
outfile <- paste(file,"inla",sep='-')
eroutfile <- paste(file,"erinla",sep='-')
#read file
fits <- readFITS(file=paste(file,"fit",sep='.'))
img <- fits$imDat[,]
subset_img <- img[1:20, 1:20]  # This will extract the top-left 20x20 portion of the img array
# Get dimensions of the img array
dims <- dim(img)
# Create x and y arrays using matrix indexing
x <- matrix(rep(1:dims[1], dims[2]), nrow = dims[1], ncol = dims[2])
y <- matrix(rep(1:dims[2], each = dims[1]), nrow = dims[1], ncol = dims[2])
##valid data
valid <- which(!(img < 20 | is.na(img)))
xsize <- dims[2]
ysize <- dims[1]
xfin <- xsize
yfin <- ysize
##normalize data
logimg = log10(img)
## INLA
imginla <- stationary_inla(x[valid],y[valid],logimg[valid],zoom=zoom,
xsize=xsize,shape='none',xfin=xfin,
yfin=yfin,ysize=ysize,cutoff=cutoff,
tolerance=1e-6,restart=0)
imginla <- nonparametric_inla(x[valid],y[valid], logimg[valid], ,xsize=xsize,ysize=ysize)
imginla <- nonparametric_inla(x[valid],y[valid], logimg[valid], ,xsize=xsize,ysize=ysize)
imginla <- nonparametric_inla(x[valid],y[valid], logimg[valid], ,xsize=xsize,ysize=ysize)
imginla <- nonparametric_inla(x[valid],y[valid], logimg[valid], ,xsize=xsize,ysize=ysize)
imginla <- nonparametric_inla(x[valid],y[valid], logimg[valid], ,xsize=xsize,ysize=ysize)
library(INLA)
library(IDPmisc)
require(rasterVis)
library(viridis)
library(latex2exp)
library(fields) #;library(imager);
library(lattice);require(latticeExtra) #;require(INLAutils)
require(classInt);require(reshape2)
library(FITSio)
library(rmarkdown)
Van_Gogh <- c("#263C8B","#4E74A6", "#BDBF78", "#BFA524", "#2E231F")
colpal<-colorRampPalette(Van_Gogh)(100)
cutColor <- 100
zoom <- 1
cutoff <- 0.9 #bit lower than minimum distance
home <- "/home/dp/"
source(paste("./inla_fct.R",sep=''))
name <- "stavros"
dir <- paste("./first_results/",sep='')
file <- paste(dir,"HI_6563s",sep='')
outfile <- paste(file,"inla",sep='-')
eroutfile <- paste(file,"erinla",sep='-')
#read file
fits <- readFITS(file=paste(file,"fit",sep='.'))
img <- fits$imDat[,]
subset_img <- img[1:20, 1:20]  # This will extract the top-left 20x20 portion of the img array
# Get dimensions of the img array
dims <- dim(img)
# Create x and y arrays using matrix indexing
x <- matrix(rep(1:dims[1], dims[2]), nrow = dims[1], ncol = dims[2])
y <- matrix(rep(1:dims[2], each = dims[1]), nrow = dims[1], ncol = dims[2])
##valid data
valid <- which(!(img < 20 | is.na(img)))
xsize <- dims[2]
ysize <- dims[1]
xfin <- xsize
yfin <- ysize
##normalize data
logimg = log10(img)
## INLA
imginla <- stationary_inla(x[valid],y[valid],logimg[valid],zoom=zoom,
xsize=xsize,shape='none',xfin=xfin,
yfin=yfin,ysize=ysize,cutoff=cutoff,
tolerance=1e-6,restart=0)
```{r}
```{r}
nonparametric_inla <- function(tx, ty, tpar, tepar, weight=1, name='age',xsize=77,ysize=70){
tweight <- weight
if (hasArg(tepar)) { epar <- tepar^2 } else { epar <- NULL}
#valid data
valid <- which(!(tpar <= 0) & !(tepar <= 0) & !(tepar == "NaN") & !(tweight <=0))
x <- c(tx[valid],rep(1:(xsize+1),each=(ysize+1)))
y <- c(ty[valid],rep(1:(ysize+1),xsize+1))
par <- c(tpar[valid],rep(NA,length=((xsize+1)*(ysize+1))))
epar <- c(tepar[valid],rep(NA,length=((xsize+1)*(ysize+1))))
weight <- c(tweight[valid],rep(NA,length=((xsize+1)*(ysize+1))))
#radius fct
xcenter <- sum(x[1:length(valid)]*weight[1:length(valid)])/sum(weight[1:length(valid)])
ycenter <- sum(y[1:length(valid)]*weight[1:length(valid)])/sum(weight[1:length(valid)])
radius <- sqrt((x-xcenter)^2 + (y-ycenter)^2)
radius_2 <- (x-xcenter)^2 + (y-ycenter)^2
#ellipse fct
covar <- cov.wt(cbind(x[1:length(valid)],y[1:length(valid)]), w=weight[1:length(valid)])
eigens <- eigen(covar$cov)
ellipse <- (cbind(x-xcenter,y-ycenter)%*%(eigens$vectors[,1]))^2/eigens$values[1] +(cbind(x-xcenter,y-ycenter)%*%(eigens$vectors[,2]))^2/eigens$values[2]
ellipse_2 =  ellipse^2
mesh <- inla.mesh.2d(cbind(x,y), max.n = 10, cutoff = 5)
A <- inla.spde.make.A(mesh, loc=cbind(x,y))
#inverse scale
basis.T <- inla.mesh.basis(mesh,type="b.spline", n=2, degree=2)
#inverse range
basis.K <- inla.mesh.basis(mesh,type="b.spline", n=2, degree=2)
spde <- inla.spde2.matern(mesh=mesh, alpha=2,
B.tau=cbind(0,basis.T,basis.K*0),B.kappa=cbind(0,basis.T*0,basis.K/2))
stk <- inla.stack(data=list(par=par), A=list(A,1,1,1),effects=list(i=1:spde$n.spde,
ellipse=ellipse,ellipse_2=ellipse_2,m=rep(1,length(x))),tag='est')
##rw2=random_walk, ou=Ornstein-Uhlenbeck
## putting "compute=TRUE" will predict the rest of NA values
res <- inla(par ~ 0 + m + f(ellipse,model="ou") +f(i, model=spde), data=inla.stack.data(stk),
control.predictor=list(A=inla.stack.A(stk),compute=TRUE),scale=epar^2,quantiles=0.5)
#output <- inla.mesh.project(inla.mesh.projector(mesh,xlim=c(0,xsize),ylim=c(0,ysize),
#       dim=c(xsize+1,ysize+1)),t(matrix(as.numeric(res$summary.fitted.values$mean[(length(#valid)+1):length(x)]),nrow=ysize+1,ncol=xsize+1)))
output <- t(matrix(as.numeric(res$summary.fitted.values$mean[(length(valid)+1):length(x)]),nrow=ysize+1,ncol=xsize+1))
##chec radial nonpar fct
plot(res$summary.random$i$ID,res$summary.random$i$mean)
#original data to compare
timage <- matrix(NA,nrow=ysize+1,ncol=xsize+1)
for (i in 1:length(valid)) {timage[x[i],y[i]] <- par[i]}
terrimage <- matrix(NA,nrow=ysize+1,ncol=xsize+1)
for (i in 1:length(valid)) {terrimage[x[i],y[i]] <- epar[i]}
name='NGC2906-age-0.05'
ra=range(par[1:length(valid)])
png(filename=paste(name,'INLA_nonparametric.png',sep='_'))
par(mfrow=c(2,1))
image(timage,col=hsv(100:1/100*0.6),zlim=ra)
title(name)
image(output,col=hsv(100:1/100*0.6),zlim=ra)
title(paste(name,'INLA:ELLIPSE',sep='_'))
dev.off()
}
library(INLA)
library(IDPmisc)
require(rasterVis)
library(viridis)
library(latex2exp)
library(fields) #;library(imager);
library(lattice);require(latticeExtra) #;require(INLAutils)
require(classInt);require(reshape2)
library(FITSio)
library(rmarkdown)
Van_Gogh <- c("#263C8B","#4E74A6", "#BDBF78", "#BFA524", "#2E231F")
colpal<-colorRampPalette(Van_Gogh)(100)
cutColor <- 100
zoom <- 1
cutoff <- 0.9 #bit lower than minimum distance
home <- "/home/dp/"
source(paste("./inla_fct.R",sep=''))
name <- "stavros"
dir <- paste("./first_results/",sep='')
file <- paste(dir,"HI_6563s",sep='')
outfile <- paste(file,"inla",sep='-')
eroutfile <- paste(file,"erinla",sep='-')
#read file
fits <- readFITS(file=paste(file,"fit",sep='.'))
img <- fits$imDat[,]
subset_img <- img[1:20, 1:20]  # This will extract the top-left 20x20 portion of the img array
# Get dimensions of the img array
dims <- dim(img)
# Create x and y arrays using matrix indexing
x <- matrix(rep(1:dims[1], dims[2]), nrow = dims[1], ncol = dims[2])
y <- matrix(rep(1:dims[2], each = dims[1]), nrow = dims[1], ncol = dims[2])
##valid data
valid <- which(!(img < 20 | is.na(img)))
xsize <- dims[2]
ysize <- dims[1]
xfin <- xsize
yfin <- ysize
##normalize data
logimg = log10(img)
## INLA
imginla <- stationary_inla(x[valid],y[valid],logimg[valid],zoom=zoom,
xsize=xsize,shape='none',xfin=xfin,
yfin=yfin,ysize=ysize,cutoff=cutoff,
tolerance=1e-6,restart=0)
imginla <- nonparametric_inla(x[valid],y[valid], logimg[valid] ,xsize=xsize,ysize=ysize)
## INLA
imginla <- stationary_inla(x[valid],y[valid],logimg[valid],zoom=zoom,
xsize=xsize,shape='ellipse',xfin=xfin,
yfin=yfin,ysize=ysize,cutoff=cutoff,
tolerance=1e-6,restart=0)
# Get dimensions of the img array
dims <- dim(img)
# Create x and y arrays using matrix indexing
x <- matrix(rep(1:dims[1], dims[2]), nrow = dims[1], ncol = dims[2])
y <- matrix(rep(1:dims[2], each = dims[1]), nrow = dims[1], ncol = dims[2])
##valid data
valid <- which(!(img < 20 | is.na(img)))
xsize <- dims[2]
ysize <- dims[1]
xfin <- xsize
yfin <- ysize
##normalize data
logimg = log10(img)
## INLA
imginla <- stationary_inla(x[valid],y[valid],logimg[valid],zoom=zoom,
xsize=xsize,shape='ellipse',xfin=xfin,
yfin=yfin,ysize=ysize,cutoff=cutoff,
tolerance=1e-6,restart=0)
## INLA
imginla <- stationary_inla(x[valid],y[valid],logimg[valid],zoom=zoom,
xsize=xsize,shape='ellipse',xfin=xfin,weight=logimg[valid],
yfin=yfin,ysize=ysize,cutoff=cutoff,
tolerance=1e-6,restart=0)
## INLA
imginla <- stationary_inla(x[valid],y[valid],logimg[valid],zoom=zoom,
xsize=xsize,shape='none',xfin=xfin,
yfin=yfin,ysize=ysize,cutoff=cutoff,
tolerance=1e-6,restart=0)
## INLA
logimg[is.nan(logimg[valid])] <- 0
imginla <- stationary_inla(x[valid],y[valid],logimg[valid],zoom=zoom,
xsize=xsize,shape='none',xfin=xfin,
yfin=yfin,ysize=ysize,cutoff=cutoff,
tolerance=1e-6,restart=0)
## INLA
imginla <- stationary_inla(x[valid],y[valid],logimg[valid],zoom=zoom,
xsize=xsize,shape='none',xfin=xfin,
yfin=yfin,ysize=ysize,cutoff=cutoff,
tolerance=1e-6,restart=0)
