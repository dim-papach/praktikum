#+title: Mask
#+property: header-args:python :session main :results value :exports both :tangle main_mask.py :comments link
#+SETUPFILE: /home/dp/org-html-themes/org/theme-readtheorg-local.setup


#+begin_src python :results none
from astropy.io import fits
import numpy as np
from maskfill import maskfill #download from github NOT pip
import matplotlib.pyplot as plt
from astropy.visualization import astropy_mpl_style
from astropy.table import Table
from astropy.stats import sigma_clip

def masked_hn(mask):
    h_mask = np.ma.masked_where(mask, h_data)
    n_mask = np.ma.masked_where(mask, n_data)
    return h_mask, n_mask


def vis(mask,name, mask_description):

    fname = "visualizations/mask_" + name + ".png"
    labels=[r"H$\alpha$ masked", "NII masked"]

    plt.style.use(astropy_mpl_style)
    # Create a figure with 1 row and 2 columns
    fig, axs = plt.subplots(1, 2, figsize=(13, 6))

    for i in range(0,2):
        im = axs[i].imshow(masked_hn(mask)[i], cmap="viridis", origin='lower')
        axs[i].set_title(labels[i])

    fig.colorbar(im, ax=axs, orientation='vertical',label='Intensity')
    fig.suptitle("FITS Visualization of Masked Data\nMask = {}".format(mask_description))
    plt.savefig(fname)
    plt.close()
    return fname

def vis_1(data, name):

    fname = "visualizations/" + name + ".png"

    plt.style.use(astropy_mpl_style)

    plt.imshow(data, cmap="viridis", origin='lower')

    plt.title("FITS Visualization of Data {}".format(name))
    plt.colorbar(orientation='vertical',label='Intensity')
    plt.savefig(fname)
    plt.close()
    return fname

def fill_vis(masked, original, filled, name, mask_description):

    fname = "visualizations/" + name + ".png"
    labels = ["Masked", "Original", "Maskfill"]
    data = [masked, original, filled[0]] #filled[1] = ImageHDU

    plt.style.use(astropy_mpl_style)
    # Create a figure with 1 row and 3 columns
    fig, axs = plt.subplots(1, 3, figsize=(12, 4))

    for i in range(0,3):
        im = axs[i].imshow(data[i] , cmap="viridis", origin='lower')
        axs[i].set_title(labels[i])

    fig.colorbar(im, ax=axs, orientation='vertical',label='Intensity')
    fig.suptitle("FITS Visualization of Masked Data and the Maskfill data of {}".format(mask_description))
    plt.savefig(fname)
    plt.close()
    return fname

#+end_src


* FITS files

#+begin_src python :results none
h1 = fits.open('HI_6563s.fits')
o1 = fits.open('O1_6300s.fits')
n2 = fits.open('N2_6583s.fits')

h1.info()
n2.info()
o1.info()

h_data = h1[0].data
n_data = n2[0].data
o_data = o1[0].data

h1.close()
n2.close()
o1.close()
#+end_src

- We don't use ~fits.getdata()~ because this way we can use more functions of the astropy library
- Each FITS file has only one HDU (Header Data Unit), so we can get the data from the PrimaryHDU:

#+begin_src python :results file link
vis_1(h_data,"HI")
#+end_src

#+RESULTS:
[[file:visualizations/HI.png]]



#+begin_src python :results file link
vis_1(n_data,"NI")
#+end_src

#+RESULTS:
[[file:visualizations/NI.png]]

#+begin_src python :results file link
vis_1(o_data,"OII")
#+end_src

#+RESULTS:
[[file:visualizations/OII.png]]

* Masking the data

** Masking condition

I use the condition =mask = o_data > o_data.mean() + $\sigma$=, because if we use the condition =mask = o_data !=0= we get a lot of noise as well!

#+begin_src python :results none

# Mask condition
masks = [o_data!=0,
         o_data > o_data.mean(),
         o_data >  o_data.mean() + 3 * o_data.std()]
#+end_src



** Masking the H and N data



*** mask0 = o_data !=0

#+begin_src python :results file
vis(masks[0],"0", r"OI $\ne$ 0")
#+end_src

#+RESULTS:
[[file:visualizations/mask_0.png]]

We have a lot of noise in our data

*** mask1 = o_data > o_data.mean()
#+begin_src python :results file link
vis(masks[1],"1", r"OI > $\overline{OI}$")
#+end_src

#+RESULTS:
[[file:visualizations/mask_1.png]]

Less noise, we could do better.

*** mask2 = o_data > o_clip.std()

#+begin_src python :results file link
vis(masks[2],"2", r"OI >  $\overline{OI}$ + $\sigma$")
#+end_src

#+RESULTS:
[[file:visualizations/mask_2.png]]

** Pixel distribution (or "Why the \sigma mask is the best")

If we see the pixel distribution we can see that we have a lot of active pixels in the low magnitudes of the OI. This most likely is the noise of our data and we should ignore it!

#+begin_src python :results none
pixel_values = o_data.flatten()
#+end_src


#+begin_src python :results drawer file link value
fname = "visualizations/distr.png"
# Create a histogram
plt.hist(pixel_values , bins=150, log = True)

plt.title('Pixel Distribution in OI FITS File')
plt.xlabel('Pixel Value')
plt.ylabel('Frequency')

# Add vertical lines for mean and mean +/- std
plt.axvline(0,
            color='black',
            linestyle='dashed',
            linewidth=2,
            label='0')

plt.axvline(o_data.mean(),
            color='red',
            linestyle='dashed',
            linewidth=2,
            label= r'$\overline{OI}$'+'= {:.2f}'.format(o_data.mean()) )

plt.axvline(o_data.mean() + o_data.std(),
            color='green',
            linestyle='dashed',
            linewidth=2,
            label=r'$\overline{OI}$+ 1 $\sigma$ ='+'{:.2f} '.format(o_data.mean() + o_data.std()))

plt.fill_betweenx(y=[0, plt.gca().get_ylim()[1]],
                  x1 =0, x2 = o_data.mean() + o_data.std(),
                  color='green', alpha=0.3)

plt.axvline(o_data.mean() + 3* o_data.std(),
            color='pink',
            linestyle='dashed',
            linewidth=2,
            label=r'$\overline{OI}$+ 3 $\sigma$ ='+'{:.2f} '.format(o_data.mean() + 3* o_data.std()))

plt.fill_betweenx(y=[0, plt.gca().get_ylim()[1]],
                  x1 =o_data.mean() + o_data.std(), x2 = o_data.mean() + 3* o_data.std(),
                  color='pink', alpha=0.6)



plt.legend()

plt.savefig(fname)
plt.close()
fname
#+end_src

#+RESULTS:
[[file:visualizations/distr.png]]

***** [?] maybe it is better to use 3$\sigma$


* Use INLA

I will use R-INLA this time instead of Maskfill. Let's see if this works. For this I need to use R.

** Trying to write a script in R

#+begin_src root

#+end_src
